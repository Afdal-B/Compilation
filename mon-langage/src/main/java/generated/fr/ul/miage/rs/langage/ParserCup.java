
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated.fr.ul.miage.rs.langage;

import fr.ul.miage.arbre.*;
import fr.ul.miage.us.Tds;
import fr.ul.miage.us.Item;
import fr.ul.miage.us.Cat;
import fr.ul.miage.us.Type;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\025" +
    "\004\000\002\025\003\000\002\024\004\000\002\024\003" +
    "\000\002\023\013\000\002\023\016\000\002\023\011\000" +
    "\002\023\012\000\002\020\005\000\002\020\003\000\002" +
    "\020\002\000\002\030\004\000\002\021\004\000\002\021" +
    "\003\000\002\027\005\000\002\027\007\000\002\022\004" +
    "\000\002\022\003\000\002\026\005\000\002\026\007\000" +
    "\002\003\007\000\002\006\007\000\002\006\011\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\004\005" +
    "\000\002\017\004\000\002\017\003\000\002\013\005\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\012\005\000\002\012\007\000\002\007\006\000\002\016" +
    "\005\000\002\016\003\000\002\011\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\006\022\005\023\013\001\002\000\010\002" +
    "\ufffc\022\005\023\171\001\002\000\004\024\155\001\002" +
    "\000\004\002\154\001\002\000\004\002\ufffe\001\002\000" +
    "\006\022\005\023\013\001\002\000\006\022\uffee\023\uffee" +
    "\001\002\000\004\002\000\001\002\000\004\024\014\001" +
    "\002\000\010\005\017\012\016\035\015\001\002\000\004" +
    "\036\150\001\002\000\010\004\ufff5\013\ufff5\023\021\001" +
    "\002\000\006\022\uffed\023\uffed\001\002\000\006\004\025" +
    "\013\024\001\002\000\004\024\023\001\002\000\006\004" +
    "\ufff6\013\ufff6\001\002\000\006\004\ufff4\013\ufff4\001\002" +
    "\000\004\033\027\001\002\000\004\023\021\001\002\000" +
    "\006\004\ufff7\013\ufff7\001\002\000\004\023\032\001\002" +
    "\000\014\014\050\016\041\020\047\023\032\024\043\001" +
    "\002\000\014\014\ufff2\016\ufff2\020\ufff2\023\ufff2\024\ufff2" +
    "\001\002\000\004\024\033\001\002\000\006\005\035\035" +
    "\034\001\002\000\004\036\036\001\002\000\014\014\ufff1" +
    "\016\ufff1\020\ufff1\023\ufff1\024\ufff1\001\002\000\004\005" +
    "\037\001\002\000\014\014\ufff0\016\ufff0\020\ufff0\023\ufff0" +
    "\024\ufff0\001\002\000\016\014\050\016\041\020\047\021" +
    "\uffe0\024\043\034\uffe0\001\002\000\010\012\056\024\057" +
    "\036\054\001\002\000\004\021\141\001\002\000\004\035" +
    "\134\001\002\000\016\014\uffdd\016\uffdd\020\uffdd\021\uffdd" +
    "\024\uffdd\034\uffdd\001\002\000\004\005\133\001\002\000" +
    "\016\014\uffdc\016\uffdc\020\uffdc\021\uffdc\024\uffdc\034\uffdc" +
    "\001\002\000\004\012\127\001\002\000\004\012\052\001" +
    "\002\000\014\014\ufff3\016\ufff3\020\ufff3\023\ufff3\024\ufff3" +
    "\001\002\000\010\012\056\024\057\036\054\001\002\000" +
    "\034\004\uffd3\005\uffd3\006\uffd3\007\105\010\uffd3\011\106" +
    "\013\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\001\002\000\034\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\013\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\001\002\000\034\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\001\002\000\010" +
    "\012\056\024\057\036\054\001\002\000\036\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\116\013\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\001" +
    "\002\000\034\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\013\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\001\002\000\022\006\076\010\077\025\101" +
    "\026\075\027\100\030\073\031\072\032\074\001\002\000" +
    "\004\013\063\001\002\000\004\033\065\001\002\000\020" +
    "\014\uffea\015\070\016\uffea\020\uffea\021\uffea\024\uffea\034" +
    "\uffea\001\002\000\012\014\050\016\041\020\047\024\043" +
    "\001\002\000\004\034\067\001\002\000\020\014\uffe2\015" +
    "\uffe2\016\uffe2\020\uffe2\021\uffe2\024\uffe2\034\uffe2\001\002" +
    "\000\004\033\065\001\002\000\016\014\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\024\uffe9\034\uffe9\001\002\000\010\012\056" +
    "\024\057\036\054\001\002\000\010\012\056\024\057\036" +
    "\054\001\002\000\010\012\056\024\057\036\054\001\002" +
    "\000\010\012\056\024\057\036\054\001\002\000\010\012" +
    "\056\024\057\036\054\001\002\000\010\012\056\024\057" +
    "\036\054\001\002\000\010\012\056\024\057\036\054\001" +
    "\002\000\010\012\056\024\057\036\054\001\002\000\010" +
    "\006\076\010\077\013\uffe5\001\002\000\010\006\076\010" +
    "\077\013\uffe4\001\002\000\034\004\uffd4\005\uffd4\006\uffd4" +
    "\007\105\010\uffd4\011\106\013\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002\000\010\012\056" +
    "\024\057\036\054\001\002\000\010\012\056\024\057\036" +
    "\054\001\002\000\034\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\001\002\000\034\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\001\002\000\034" +
    "\004\uffd5\005\uffd5\006\uffd5\007\105\010\uffd5\011\106\013" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\001\002\000\010\006\076\010\077\013\uffe7\001\002\000" +
    "\010\006\076\010\077\013\uffe3\001\002\000\010\006\076" +
    "\010\077\013\uffe6\001\002\000\010\006\076\010\077\013" +
    "\uffe8\001\002\000\010\012\056\024\057\036\054\001\002" +
    "\000\006\004\123\013\uffd7\001\002\000\004\013\122\001" +
    "\002\000\012\004\uffd6\006\076\010\077\013\uffd6\001\002" +
    "\000\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\001\002\000\010\012\056\024\057\036\054\001" +
    "\002\000\004\013\uffd8\001\002\000\010\006\076\010\077" +
    "\013\126\001\002\000\034\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\001\002\000\010\012\056\024" +
    "\057\036\054\001\002\000\004\013\131\001\002\000\004" +
    "\033\065\001\002\000\016\014\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\024\uffeb\034\uffeb\001\002\000\016\014\uffde\016\uffde" +
    "\020\uffde\021\uffde\024\uffde\034\uffde\001\002\000\012\012" +
    "\056\017\135\024\057\036\054\001\002\000\004\012\137" +
    "\001\002\000\010\005\uffdb\006\076\010\077\001\002\000" +
    "\004\013\140\001\002\000\004\005\uffda\001\002\000\010" +
    "\012\056\024\057\036\054\001\002\000\010\005\143\006" +
    "\076\010\077\001\002\000\004\034\144\001\002\000\010" +
    "\002\ufffa\022\ufffa\023\ufffa\001\002\000\010\005\146\006" +
    "\076\010\077\001\002\000\016\014\uffdf\016\uffdf\020\uffdf" +
    "\021\uffdf\024\uffdf\034\uffdf\001\002\000\006\021\uffe1\034" +
    "\uffe1\001\002\000\004\005\151\001\002\000\006\022\uffec" +
    "\023\uffec\001\002\000\004\002\uffff\001\002\000\006\022" +
    "\uffef\023\uffef\001\002\000\004\002\001\001\002\000\004" +
    "\012\156\001\002\000\010\004\ufff5\013\ufff5\023\021\001" +
    "\002\000\006\004\025\013\160\001\002\000\004\033\161" +
    "\001\002\000\016\014\050\016\041\020\047\023\032\024" +
    "\043\034\163\001\002\000\004\034\167\001\002\000\010" +
    "\002\ufff9\022\ufff9\023\ufff9\001\002\000\014\014\050\016" +
    "\041\020\047\023\032\024\043\001\002\000\004\034\166" +
    "\001\002\000\010\002\ufffb\022\ufffb\023\ufffb\001\002\000" +
    "\010\002\ufff8\022\ufff8\023\ufff8\001\002\000\004\002\ufffd" +
    "\001\002\000\004\024\172\001\002\000\004\012\016\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\016\002\005\022\007\023\003\024\006\025" +
    "\011\026\010\001\001\000\006\023\003\024\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\003\024\151\026\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\017\030\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\025" +
    "\001\001\000\002\001\001\000\006\021\027\027\030\001" +
    "\001\000\016\003\045\006\043\012\044\013\037\017\041" +
    "\027\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\045\006\043\012" +
    "\044\013\037\017\146\001\001\000\012\007\054\010\144" +
    "\014\052\015\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\061\007\054\010\060\014\052\015\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\054\010\124\014\052\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\063\001\001\000\002\001\001\000\014" +
    "\003\045\006\043\012\044\013\037\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\070\001\001" +
    "\000\002\001\001\000\012\007\054\010\114\014\052\015" +
    "\057\001\001\000\012\007\054\010\113\014\052\015\057" +
    "\001\001\000\012\007\054\010\112\014\052\015\057\001" +
    "\001\000\012\007\054\010\111\014\052\015\057\001\001" +
    "\000\010\007\054\014\110\015\057\001\001\000\010\007" +
    "\054\014\103\015\057\001\001\000\012\007\054\010\102" +
    "\014\052\015\057\001\001\000\012\007\054\010\101\014" +
    "\052\015\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\054\015\107\001\001\000" +
    "\006\007\054\015\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\054" +
    "\010\120\011\116\014\052\015\057\016\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\054\010\120\011\116\014\052\015" +
    "\057\016\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\127\007\054\010\060\014" +
    "\052\015\057\001\001\000\002\001\001\000\004\004\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\054\010\135\014\052\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\054\010\141\014\052\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\156\030\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\045\006\043\012\044\013\037\017\161\021\163\027\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\045\006\043\012\044\013\037\017\164\027\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	//public Noeud res = null;
	public ArrayList res = new ArrayList<Object>();
    public ArrayList<ArrayList<Object>> tuples = new ArrayList<ArrayList<Object>>(); // L'objet qu'on retourne à la fin contenant l'arbre et la tds
    public Tds fonction = new Tds();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= langage EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // langage ::= prog 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 res= (ArrayList<Object>)p;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("langage",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= l_declaration_globale l_function 
            {
              ArrayList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList ld = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList lf = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Object>();
                        // nous alons fusionner tout les items crée jusque là dans une liste
                        ArrayList items = new ArrayList<Item>();
                        // et toutes les fonctions dans une autre liste
                        ArrayList fonctions = new ArrayList<Fonction>();
                         for(ArrayList<Object> tuple:(ArrayList<ArrayList<Object>>)lf){
                         items.addAll((ArrayList<Item>)(tuple.get(0)));
                         fonctions.add((tuple.get(1)));}
                         // On crée la tds à partir des items et on la met dans notre resultat
                         Tds tds =new Tds();
                         //On ajoute les variables globales
                         for (Item item:(ArrayList<Item>)ld){tds.addItem(item);}
                         // On rajoute les fonctions et les variables locales
                         for (Item item:(ArrayList<Item>)items){tds.addItem(item);}
                         RESULT.add(tds);
                         // On cree le noeud prog et on lui lie tous les noeuds fonctions
                         Prog prog = new Prog();
                         for (Fonction fonction:(ArrayList<Fonction>)fonctions){prog.ajouterUnFils(fonction);}
                         RESULT.add(prog);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= l_function 
            {
              ArrayList RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList lf = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Object>();
                                 // nous alons fusionner tout les items crée jusque là dans une liste
                                 ArrayList items = new ArrayList<Item>();
                                 // et toutes les fonctions dans une autre liste
                                 ArrayList fonctions = new ArrayList<Fonction>();
                                  for(ArrayList<Object> tuple:(ArrayList<ArrayList<Object>>)lf){
                                  items.addAll((ArrayList<Item>)(tuple.get(0)));
                                  fonctions.add((tuple.get(1)));}
                                  // On crée la tds à partir des items et on la met dans notre resultat
                                  Tds tds =new Tds();
                                  // On rajoute les fonctions et les variables locales
                                  for (Item item:(ArrayList<Item>)items){tds.addItem(item);}
                                  RESULT.add(tds);
                                  // On cree le noeud prog et on lui lie tous les noeuds fonctions
                                  Prog prog = new Prog();
                                  for (Fonction fonction:(ArrayList<Fonction>)fonctions){prog.ajouterUnFils(fonction);}
                                  RESULT.add(prog);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // l_function ::= function l_function 
            {
              ArrayList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList f = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList lf = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		System.out.println("liste de fonction");
                                            RESULT = lf;
                                            RESULT.add(0,f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_function",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // l_function ::= function 
            {
              ArrayList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList f = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<ArrayList<Object>>();
                                    RESULT.add(f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_function",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= VIDE IDF PO l_param_declare PF AO l_declaration_locale l_instructions AF 
            {
              ArrayList RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList dl = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 System.out.println("fonction");
                                                            RESULT = new ArrayList<Object>() ;
                                                            // On rajoute des informations sur la fonction à la tds
                                                            ArrayList matds = new ArrayList<Item>();
                                                            matds.add(new Item((String)idf,Type.VOID,Cat.FONCTION,((ArrayList<Item>)lp).size(),1));
                                                            // On defini les scope de nos paramètres et variable locale comme étant la fonction
                                                            for (Item item:(ArrayList<Item>)lp){((Item)item).setScope((Item)(matds.get(0)));}
                                                            for (Item item:(ArrayList<Item>)dl){((Item)item).setScope((Item)(matds.get(0)));}
                                                            matds.addAll(lp);
                                                            matds.addAll(dl);
                                                            RESULT.add(matds);
                                                            Fonction fonc = new Fonction((String)idf);
                                                            fonc.setFils(li);
                                                            RESULT.add(fonc);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= ENTIER IDF PO l_param_declare PF AO l_declaration_locale l_instructions RETOURNE expression PVIRGULE AF 
            {
              ArrayList RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ArrayList dl = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 System.out.println("fonction");
                                                                               RESULT = new ArrayList<Object>() ;
                                                                               // On rajoute des informations sur la fonction à la tds
                                                                               ArrayList matds = new ArrayList<Item>();
                                                                               matds.add(new Item((String)idf,Type.INT,Cat.FONCTION,((ArrayList<Item>)lp).size(),1));
                                                                               // On defini les scope de nos paramètres et variable locale comme étant la fonction
                                                                               for (Item item:(ArrayList<Item>)lp){((Item)item).setScope((Item)(matds.get(0)));}
                                                                               for (Item item:(ArrayList<Item>)dl){((Item)item).setScope((Item)(matds.get(0)));}
                                                                               matds.addAll(lp);
                                                                               matds.addAll(dl);
                                                                               RESULT.add(matds);
                                                                               Fonction fonc = new Fonction((String)idf);
                                                                               fonc.setFils(li);
                                                                              // ajouter le retour de la fonction
                                                                               Retour retour =new Retour(fonc);
                                                                               retour.setLeFils(x);
                                                                               fonc.ajouterUnFils(retour);
                                                                               RESULT.add(fonc);

                                                                              
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= VIDE IDF PO l_param_declare PF AO AF 
            {
              ArrayList RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		RESULT = new ArrayList<Object>() ;
                                                // On rajoute des informations sur la fonction à la tds
                                                 ArrayList matds = new ArrayList<Item>();
                                                 matds.add(new Item((String)idf,Type.INT,Cat.FONCTION,((ArrayList<Item>)lp).size(),0));
                                                 Fonction fonc = new Fonction((String)idf);
                                                 RESULT.add(matds);
                                                 RESULT.add(fonc);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function ::= VIDE IDF PO l_param_declare PF AO l_instructions AF 
            {
              ArrayList RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new ArrayList<Object>() ;
                                                                                // On rajoute des informations sur la fonction à la tds
                                                                              ArrayList matds = new ArrayList<Item>();
                                                                              matds.add(new Item((String)idf,Type.VOID,Cat.FONCTION,((ArrayList<Item>)lp).size(),1));
                                                                              // On defini les scope de nos paramètres et variable locale comme étant la fonction
                                                                              for (Item item:(ArrayList<Item>)lp){((Item)item).setScope((Item)(matds.get(0)));}
                                                                              matds.addAll(lp);
                                                                              RESULT.add(matds);
                                                                              Fonction fonc = new Fonction((String)idf);
                                                                              fonc.setFils(li);
                                                                              RESULT.add(fonc);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_param_declare ::= l_param_declare VIRGULE param_declare 
            {
              ArrayList RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item p = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = lp;
                                                                p.setRang(RESULT.size()); // le rang du paramètre sera la taille actuelle de la liste
                                                                RESULT.add(0,p);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_param_declare",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // l_param_declare ::= param_declare 
            {
              ArrayList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item p = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Item>();
                                        p.setRang(0);
                                        RESULT.add(p);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_param_declare",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // l_param_declare ::= 
            {
              ArrayList RESULT =null;
		RESULT = new ArrayList<Item>();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_param_declare",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_declare ::= ENTIER IDF 
            {
              Item RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Item((String)idf,Type.INT,Cat.PARAM);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_declare",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // l_declaration_locale ::= l_declaration_locale declaration_locale 
            {
              ArrayList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList ld = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item d = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = ld;
                                                                d.setRang(RESULT.size()); // le rang de la variable locale sera la taille actuelle de la liste
                                                                RESULT.add(0,d);
                                       
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_declaration_locale",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // l_declaration_locale ::= declaration_locale 
            {
              ArrayList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item d = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Item>();
                                    d.setRang(0);
                                   RESULT.add(d);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_declaration_locale",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_locale ::= ENTIER IDF PVIRGULE 
            {
              Item RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Item((String)idf,Type.INT,Cat.LOCAL);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration_locale",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_locale ::= ENTIER IDF AFFE NUM PVIRGULE 
            {
              Item RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Item((String)idf,Type.INT,Cat.LOCAL,val);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration_locale",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // l_declaration_globale ::= l_declaration_globale declaration_globale 
            {
              ArrayList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList ld = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item d = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = ld;

                                                                RESULT.add(0,d);
                                       
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_declaration_globale",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // l_declaration_globale ::= declaration_globale 
            {
              ArrayList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Item d = (Item)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Item>();

                                   RESULT.add(d);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_declaration_globale",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_globale ::= ENTIER IDF PVIRGULE 
            {
              Item RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Item((String)idf,Type.INT,Cat.GLOBAL);
                                            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration_globale",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_globale ::= ENTIER IDF AFFE NUM PVIRGULE 
            {
              Item RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Item((String)idf,Type.INT,Cat.GLOBAL,val);
                                                
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration_globale",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // repetitive ::= TANTQUE PO condition PF bloc 
            {
              Noeud RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud cond = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bloc_faireleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bloc_faireright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud bloc_faire = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		System.out.println("repetitive");
                                                                RESULT = new TantQue();
                                                              ((TantQue)RESULT).setCondition(cond);
                                                              ((TantQue)RESULT).setBloc((Bloc)bloc_faire);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("repetitive",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // alternative ::= SI PO condition PF bloc 
            {
              Noeud RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud cond = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bloc_alorsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bloc_alorsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud bloc_alors = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		System.out.println("alternative");
                                            RESULT = new Si();
                                            ((Si)RESULT).setCondition(cond);
                                            ((Si)RESULT).setBlocAlors((Bloc)bloc_alors);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("alternative",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // alternative ::= SI PO condition PF bloc SINON bloc 
            {
              Noeud RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Noeud cond = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int bloc_alorsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bloc_alorsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud bloc_alors = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bloc_sinonleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bloc_sinonright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud bloc_sinon = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Si();
                                                    ((Si)RESULT).setCondition(cond);
                                                    ((Si)RESULT).setBlocAlors((Bloc)bloc_alors);
                                                    ((Si)RESULT).setBlocSinon((Bloc)bloc_sinon);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("alternative",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= expression EG expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		System.out.println("Condition");
                                                RESULT = new Egal();
                                               ((Egal)RESULT).setFilsGauche(e1);
                                               ((Egal)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expression INF expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Inferieur();
                                                    ((Inferieur)RESULT).setFilsGauche(e1);
                                                    ((Inferieur)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= expression INFE expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new InferieurEgal();
                                                    ((InferieurEgal)RESULT).setFilsGauche(e1);
                                                    ((InferieurEgal)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= expression SUP expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Superieur();
                                                    ((Superieur)RESULT).setFilsGauche(e1);
                                                    ((Superieur)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= expression SUPE expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new SuperieurEgal();
                                                    ((SuperieurEgal)RESULT).setFilsGauche(e1);
                                                    ((SuperieurEgal)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= expression DIFF expression 
            {
              Noeud RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud e1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Different();
                                                    ((Different)RESULT).setFilsGauche(e1);
                                                    ((Different)RESULT).setFilsDroit(e2);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloc ::= AO l_instructions AF 
            {
              Noeud RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = new Bloc();
                                      ((Bloc)RESULT).setFils(li);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloc",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // l_instructions ::= instruction l_instructions 
            {
              ArrayList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = li;
                                                        RESULT.add(0,i);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_instructions",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l_instructions ::= instruction 
            {
              ArrayList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Noeud>();
                                                        RESULT.add(i);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("l_instructions",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruction ::= ECRIRE expression PVIRGULE 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		    RESULT = new Ecrire();
                                                    ((Ecrire)RESULT).setLeFils(x);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruction ::= affectation PVIRGULE 
            {
              Noeud RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud aff = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT=aff;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= alternative 
            {
              Noeud RESULT =null;
		int altleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud alt = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = alt ;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruction ::= repetitive 
            {
              Noeud RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int repright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud rep = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = rep;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // affectation ::= IDF AFFE expression 
            {
              Noeud RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Affectation();
                                              ((Affectation)RESULT).setFilsGauche(new Idf(idf));
                                              ((Affectation)RESULT).setFilsDroit(x);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // affectation ::= IDF AFFE LIRE PO PF 
            {
              Noeud RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		RESULT = new Affectation();
                                                ((Affectation)RESULT).setFilsGauche(new Idf(idf));
                                                ((Affectation)RESULT).setFilsDroit(new Lire());
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // appel ::= IDF PO lparam PF 
            {
              Noeud RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                                                    RESULT = new Appel(new Fonction(idf));
                                                    ((Appel)RESULT).setFils(lp);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lparam ::= param VIRGULE lparam 
            {
              ArrayList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud p = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = lp;
                                    RESULT.add(0,p);
                            
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lparam",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lparam ::= param 
            {
              ArrayList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud p = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new ArrayList<Noeud>();
                        RESULT.add(p);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lparam",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param ::= expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT =x;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression ADD facteur 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  System.out.println("Addition");
                                                RESULT =new Plus();
                                               ((Plus)RESULT).setFilsGauche(x);
                                               ((Plus)RESULT).setFilsDroit(f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression SOUS facteur 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  System.out.println("Soustraction");
                                                     RESULT =new Moins();
                                                    ((Moins)RESULT).setFilsGauche(x);
                                                    ((Moins)RESULT).setFilsDroit(f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= facteur 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // facteur ::= facteur MUL atome 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Multiplication();
                                       ((Multiplication)RESULT).setFilsGauche(f);
                                       ((Multiplication)RESULT).setFilsDroit(a);
                                       System.out.println("Multiplication");
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // facteur ::= facteur DIV atome 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Division();
                                            ((Division)RESULT).setFilsGauche(f);
                                            ((Division)RESULT).setFilsDroit(a);
                                            System.out.println("Division");
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // facteur ::= atome 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atome ::= NUM 
            {
              Noeud RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Const(n);
                                System.out.println("Constante");
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atome ::= IDF 
            {
              Noeud RESULT =null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object idf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = new Idf(idf);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atome ::= PO expression PF 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = x; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atome ::= appel 
            {
              Noeud RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud ap = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT =ap;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
